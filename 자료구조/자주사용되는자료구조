## Stack 자료구조

- peek()를 사용하면 스택에 가장 나중에 들어간 값을 들여다 볼 수 있습니다. 스택에서 해당 데이터가 제거되지는 않습니다.
- pop()을 사용하면 스택에서 가장 나중에 들어간 데이터를 뽑아서 스택에서 제거합니다.
- 스택 자료구조는 중복을 허용합니다.

```java
public class Main {
    public static void main(String[] args) {
        Stack<Integer> stack = new Stack<>();

        if(stack.empty()) {
            stack.add(1);
            stack.add(2);
            stack.add(3);
        }

        if(stack.peek() == 3) {
            stack.pop();
        }

        System.out.println(stack.size());
    }
}
```

## Map 자료구조

- 입력 데이터를 key와 value의 관계로 관리하고 싶을 때 사용합니다.
- map에서는 중복이 허용되지 않습니다.
- Comparator를 사용하면 key를 가지고 정렬할 수 있습니다.

```java
import java.util.*;

public class Main {
    public static void main(String[] args) {
        HashMap<String, Integer> map = new HashMap<>();

        map.put("key1", 1);
        map.put("key2", 2);
        map.put("key3", 3);

        if(map.containsKey("key1") && map.containsValue(1)) {
            System.out.println("true");
        }

        List<String> keyList = new ArrayList<>(map.keySet());

        // key를 가지고 내림차순으로 정렬. 비교는 value로 한다.
        Collections.sort(keyList, new Comparator<String>() {
            public int compare(String str1, String str2) {
                int value1 = map.get(str1);
                int value2 = map.get(str2);

                return Integer.compare(value2, value1);
            }
        });

        for(String s : keyList) {
            System.out.println(s + " = " + map.get(s));
        }
    }
}

// 출력
// true
// key3 = 3
// key2 = 2
// key1 = 1
```

## Set 자료구조

- 데이터를 중복없이 관리하고 싶을 때 사용합니다.
- 중복을 허용하지 않습니다.
- TreeSet을 사용하면 정렬이되고, HashSet을 사용하면 정렬은 되지 않습니다.

```java
import java.util.*;

public class Main {
    public static void main(String[] args) {
        TreeSet<String> treeSet = new TreeSet<>();

        treeSet.add("apple");
        treeSet.add("core");
        treeSet.add("banana");

        System.out.println("TreeSet 결과 출력");
        for(String str : treeSet) {
            System.out.println(str);
        }

        HashSet<String> hashSet = new HashSet<>(treeSet);

        System.out.println("HashSet 결과 출력");
        for(String str : hashSet) {
            System.out.println(str);
        }

        Iterator<String> iterator = hashSet.iterator();

        while(iterator.hasNext()) {
            if(iterator.next().length() == 4) {
                iterator.remove(); // core가 여기서 삭제됩니다.
            }
        }

        System.out.println("삭제한 후 출력");
        for(String str : hashSet) {
            System.out.println(str);
        }
    }
}

// 출력
//TreeSet 결과 출력
//apple
//banana
//core
//HashSet 결과 출력
//banana
//apple
//core
//삭제한 후 출력
//banana
//apple
```

## Heap(Priority Queue) 자료구조

- 데이터를 추가하거나 삭제해도 정렬 상태를 유지합니다.
- PriorityQueue 생성자를 사용하면 최대 힙, 최소 힙 등 다양한 형태를 구현할 수 있습니다.
- 중복을 허용합니다.

```java
import java.util.*;

public class Main {
    static class Item {
        int value1, value2;

        Item(int value1, int value2) {
            this.value1 = value1;
            this.value2 = value2;
        }
    }

    public static void main(String[] args) {
        PriorityQueue<Item> queue = new PriorityQueue<>(new Comparator<Item>() {
            public int compare(Item i1, Item i2) {
                if(i1.value1 == i2.value2) {
                    return Integer.compare(i1.value2, i2.value2);
                }
                return Integer.compare(i1.value1, i2.value1);
            }
        });

        queue.add(new Item(4, 3));
        queue.add(new Item(1, 3));
        queue.add(new Item(2, 4));
        queue.add(new Item(2, 5));

        Item pollItem = queue.poll();

        System.out.println("poll의 결과는 " + pollItem.value1 + "과 " + pollItem.value2 + "입니다.");

        for(Item item : queue) {
            System.out.println(item.value1 + ", " + item.value2);
        }
    }
}

// 출력
//poll의 결과는 1과 3입니다.
//2, 5
//4, 3
//2, 4
```

- 출력 결과를 보면 poll()을 사용하면 가장 우선 순위에 있는 데이터가 뽑아져 나옵니다. 이때 데이터는 큐에서 제거됩니다.
- 단순 출력을 했을 때는 정렬된 데이터가 출력되지 않는 것을 볼 수 있습니다. 정렬된 데이터를 얻기 위해서는 poll()을 사용해서 출력해야 합니다.
